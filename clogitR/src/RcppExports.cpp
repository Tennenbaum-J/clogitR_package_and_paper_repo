// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// fast_conditional_logistic_regression_cpp
List fast_conditional_logistic_regression_cpp(const Eigen::MatrixXd& X_diff, const Eigen::VectorXi& y_diff, int max_iter, double tol);
RcppExport SEXP _clogitR_fast_conditional_logistic_regression_cpp(SEXP X_diffSEXP, SEXP y_diffSEXP, SEXP max_iterSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type X_diff(X_diffSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXi& >::type y_diff(y_diffSEXP);
    Rcpp::traits::input_parameter< int >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(fast_conditional_logistic_regression_cpp(X_diff, y_diff, max_iter, tol));
    return rcpp_result_gen;
END_RCPP
}
// fast_conditional_logistic_regression_with_var_cpp
List fast_conditional_logistic_regression_with_var_cpp(const Eigen::MatrixXd& X_diff, const Eigen::VectorXi& y_diff, int j, int max_iter, double tol);
RcppExport SEXP _clogitR_fast_conditional_logistic_regression_with_var_cpp(SEXP X_diffSEXP, SEXP y_diffSEXP, SEXP jSEXP, SEXP max_iterSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type X_diff(X_diffSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXi& >::type y_diff(y_diffSEXP);
    Rcpp::traits::input_parameter< int >::type j(jSEXP);
    Rcpp::traits::input_parameter< int >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(fast_conditional_logistic_regression_with_var_cpp(X_diff, y_diff, j, max_iter, tol));
    return rcpp_result_gen;
END_RCPP
}
// process_matched_pairs_cpp
List process_matched_pairs_cpp(const Eigen::VectorXi& strata, const Eigen::VectorXd& y, const Eigen::MatrixXd& X, Nullable<Eigen::VectorXd> treatment);
RcppExport SEXP _clogitR_process_matched_pairs_cpp(SEXP strataSEXP, SEXP ySEXP, SEXP XSEXP, SEXP treatmentSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXi& >::type strata(strataSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type X(XSEXP);
    Rcpp::traits::input_parameter< Nullable<Eigen::VectorXd> >::type treatment(treatmentSEXP);
    rcpp_result_gen = Rcpp::wrap(process_matched_pairs_cpp(strata, y, X, treatment));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_clogitR_fast_conditional_logistic_regression_cpp", (DL_FUNC) &_clogitR_fast_conditional_logistic_regression_cpp, 4},
    {"_clogitR_fast_conditional_logistic_regression_with_var_cpp", (DL_FUNC) &_clogitR_fast_conditional_logistic_regression_with_var_cpp, 5},
    {"_clogitR_process_matched_pairs_cpp", (DL_FUNC) &_clogitR_process_matched_pairs_cpp, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_clogitR(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
